airbnb<-read.csv("airbnb-listings.csv",sep = ';')
options(repr.plot.height=4,repr.plot.width=6,repr.plot.res = 300)
df_madrid <- airbnb[,c('City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude')]
df_madrid<-df_madrid[which(df_madrid$Room.Type=="Entire home/apt" & df_madrid$Neighbourhood !=""& df_madrid$City=="Madrid"),]
for (i in 1:nrow(df_madrid)){
df_madrid$Square.Meters[i] <- df_madrid$Square.Feet[i]*0.092903
}
paste("El",round(((sum(is.na(df_madrid$Square.Meters)))/nrow(df_madrid))*100,2) ,"% de los apartamentos tienen el valor NA informado en la columna Square.Meters")
df_madrid_sinNA <- df_madrid[which(!is.na(df_madrid$Square.Meters) ),]
valores_cero=0
for (i in 1:nrow(df_madrid_sinNA)){
if (df_madrid_sinNA$Square.Meters[i]==0)
{
valores_cero = valores_cero+1
}}
paste("Del dataset de valores sin NA, el",round(valores_cero/nrow(df_madrid_sinNA)*100,2),"% de los apartamentos tienen cero metros cuadrados")
df_madrid$Square.Meters[df_madrid$Square.Meters == 0] <- NA
library("ggplot2")
ggplot(df_madrid, aes(x=Square.Meters)) + geom_histogram(bins=60)+ggtitle("Metros cuadrados dataset Madrid")
#El histograma de los metros cuadrados demuestra que existen unos outlayers. Pinto un boxplot para delimitar el valor a partir el cual considero un valor como outlayer.
boxplot(df_madrid$Square.Meters)
#Observando el boxplot, considero que los valores superiores al valor 150 (fin del rango intercuantílico)son outlayers.
ggplot(df_madrid[df_madrid$Square.Meters<150,], aes(x=Square.Meters)) + geom_histogram(bins=60)+ggtitle("Metros cuadrados del dataset filtrado de Madrid")
df_madrid$Square.Meters[df_madrid$Square.Meters <20] <- NA
df_madrid|> group_by(Neighbourhood) |> summarize(n=n(),num_na=sum(is.na(Square.Meters))) -> df_summarize
df_madrid$Square.Meters[df_madrid$Square.Meters <20] <- NA
df_madrid|> group_by(Neighbourhood) |> summarize(n=n(),num_na=sum(is.na(Square.Meters))) -> df_summarize
library(plyr)
df_madrid|> group_by(Neighbourhood) |> summarize(n=n(),num_na=sum(is.na(Square.Meters))) -> df_summarize
library(dplyr)
df_madrid|> group_by(Neighbourhood) |> summarize(n=n(),num_na=sum(is.na(Square.Meters))) -> df_summarize
for (i in 1:nrow(df_summarize)){
if (df_summarize$n[i]==df_summarize$num_na[i])
{
df_madrid <- df_madrid[-which(df_madrid$Neighbourhood==df_summarize$Neighbourhood[i]),]
}}
#Compruebo si los metros cuadrados siguen una distribucion gaussiana con el test de shapiro.
shapiro.test(df_madrid$Square.Meters)
#Debido a que el valor de p es bajo, la distribución es gaussiana. Aplico el test estadistico de ANOVA test Welch,
summary(aov(Square.Meters~Neighbourhood,data=df_madrid))
#Como p tiene un valor bajo, existe algún barrio que tiene los metros cuadrados distintos.
tky<-TukeyHSD(aov(Square.Meters~Neighbourhood,data=df_madrid))
tky.result<-data.frame(tky$cl)
cn <-sort(unique(df$cl))
tky<-TukeyHSD(aov(Square.Meters~Neighbourhood,data=df_madrid))
tky.result<-data.frame(tky$cl)
cn <-sort(unique(df$cl))
tky<-TukeyHSD(aov(Square.Meters~Neighbourhood,data=df_madrid))
#Tras aplicar Tukey, podemos ver como muchos barrios son muy parecidos porque tienen el p valor alto (como por ejemplo Chamberí-Carabanchel) pero en cambio otros son distintos, como puede ser Jerónimos-Adelfas.
View(tky)
TukeyHSD(aov(Square.Meters~Neighbourhood,data=df_madrid))
#Tras aplicar Tukey, podemos ver como muchos barrios son muy parecidos porque tienen el p valor alto (como por ejemplo Chamberí-Carabanchel) pero en cambio otros son distintos, como puede ser Jerónimos-Adelfas.
tky<-TukeyHSD(aov(Square.Meters~Neighbourhood,data=df_madrid))
tky.result<-data.frame(tky$cl)
cn <-sort(unique(df$cl))
tky<-TukeyHSD(aov(Square.Meters~Neighbourhood,data=df_madrid))
tky.result<-data.frame(tky$Neighbourhood)
cn <-sort(unique(df$Neighbourhood))
tky<-TukeyHSD(aov( value ~ cl, data=df))
TukeyHSD(aov( value ~ cl, data=df))
tky<-TukeyHSD(aov(Square.Meters~Neighbourhood,data=df_madrid))
tky.result<-data.frame(tky$Neighbourhood)
cn <-sort(unique(df_madrid$Neighbourhood))
resm <- matrix(NA, length(cn),length(cn))
rownames(resm) <- cn
colnames(resm) <- cn
resm[lower.tri(resm) ] <- round(tky.result$p.adj,4)
resm[upper.tri(resm) ] <- t(resm)[upper.tri(resm)]
diag(resm) <- 1
#Tras aplicar Tukey, podemos ver como muchos barrios son muy parecidos porque tienen el p valor alto (como por ejemplo Chamberí-Carabanchel) pero en cambio otros son distintos, como puede ser Jerónimos-Adelfas.
View(tky.result)
View(resm)
View(resm)
